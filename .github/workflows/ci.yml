name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true

    - name: Download dependencies
      run: make deps

    - name: Build
      run: make build

    - name: Run tests
      run: make test

    - name: Check formatting
      run: |
        make fmt
        git diff --exit-code || (echo "Please run 'make fmt' to format code" && exit 1)

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

    - name: Run linter
      run: make lint

  multi-platform-build:
    name: Test Multi-Platform Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'
        cache: true

    - name: Build for ${{ matrix.os }}/${{ matrix.arch }}
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        output="ai-docs"
        if [ "${{ matrix.os }}" = "windows" ]; then
          output="ai-docs.exe"
        fi
        go build -o $output .